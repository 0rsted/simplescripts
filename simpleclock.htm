<!DOCTYPE html>
<html>

<head>
  <title>JS Clock</title>
  <style>
    * {
      font-family: "SF Display Pro", sans-serif;
      margin: 0;
      padding: 0;
    }

    td {
      text-align: center;
      vertical-align: top;
      text-transform: lowercase;
    }

    .ucfirst {
      text-transform: lowercase;
    }

    .ucfirst:first-letter {
      text-transform: uppercase;
    }

    #minute::before,
    #second::before {
      content: ":";
    }

    #hiddenDateField {
      display: none;
    }

    #time {
      font-size: 38cqw;
      /* 25 if seconds are shown, 38 if not */
      line-height: 1.1em;
      font-weight: bold;
    }

    #date {
      font-size: 7.5cqw;
      line-height: 1.2em;
      font-weight: normal;
    }

    #time,
    #date {
      container: content/inline-size;
      resize: none;
      contain: paint;
      text-align: center;
    }

    #content {
      position: absolute;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      align-content: center;
    }
  </style>
</head>

<body>
  <div id="content">
    <div id="time"></div>
    <div id="date"></div>
  </div>
  <script>
    // functions used by the script

    // padZero takes an input and makes sure that it's the right length by 
    // inputting zeros in front until length is met, default length is 2
    const padZero = (input, length = 2) => {
      return String(input).padStart(length, "0")
    }

    // find out if a certain key is in the qs, and if it has a qs-true value
    const qsStrToBool = (input) => {
      input = input && String(input).toLowerCase()
      let rVal = undefined
      // if the value is an empty string, the value isn't defined, but the key is
      if (['true', 't', '1', ''].includes(input)) rVal = true
      // if the value is null, the key isn't defined
      if (['false', 'f', '0', null].includes(input)) rVal = false
      return rVal
    }

    // find out if a string input looks like it's hexadecimal (for colors)
    const isColorHex = (input) => {
      return !!input.match(/^([0-9A-F]{3}){1,2}$/gmi)
    }

    const months = [
      "januar",
      "februar",
      "marts",
      "april",
      "maj",
      "juni",
      "juli",
      "august",
      "september",
      "oktober",
      "november",
      "december",
    ]
    const days = [
      "søndag",
      "mandag",
      "tirsdag",
      "onsdag",
      "torsdag",
      "fredag",
      "lørdag",
      "søndag",
    ]

    // vaild paramter names
    const allowedParams = {
      backgroundParams: [
        "background",
        "bg"
      ],
      colorParams: [
        "colour",
        "color"
      ],
      capitalizeParams: [
        "capitalize"
      ],
      dateParams: [
        "date",
        "showdate"
      ],
      secondsParams: [
        "seconds",
        "showSeconds"
      ]
    }

    const params = new URLSearchParams(document.location.search)
    const getParam = (param) => {
      if (Array.isArray(param)) param = param[0]
      paramGroup = getParamGroup(param)
      if (!paramGroup) return false
      const foundParam = paramGroup.find(paramKey => paramKey.toLowerCase() === param.toLowerCase())
      return params.get(foundParam)
    }

    const getParamGroup = (param) => {
      return allowedParams[Object.keys(allowedParams).find(paramKey => {
        if (paramKey.toLowerCase() === param.toLowerCase()) {
          return allowedParams[paramKey]
        }
        return allowedParams[paramKey].find(paramKey => paramKey.toLowerCase() === param.toLowerCase())
      })]
    }

    const isParamAllowed = (param) => {
      return Object.keys(allowedParams).flatMap((groupName) => allowedParams[groupName]).find(arrayParam => arrayParam.toLowerCase() === param.toLowerCase())
    }

    const fontColor = (() => {
      const color = getParam('color')
      return color ?
        isColorHex(color) ?
          `#${color.toUpperCase()}`
          : color
        : '#000000'
    })()
    document.body.style.setProperty('color', fontColor)

    const capitalize = qsStrToBool(getParam('capitalize'))

    const bgColor = (() => {
      const color = getParam('background')
      return color ?
        isColorHex(color) ?
          `#${color.toUpperCase()}`
          : color
        : 'transparent'
    })()
    document.body.style.setProperty('background-color', bgColor)

    const showSeconds = qsStrToBool(getParam('seconds'))

    const timeField = document.getElementById("time")
    const hourField = document.createElement("span")
    hourField.setAttribute("id", "hour")
    const minuteField = document.createElement("span")
    minuteField.setAttribute("id", "minute")
    timeField.appendChild(hourField)
    timeField.appendChild(minuteField)
    if (showSeconds) {
      const secondField = document.createElement("span")
      secondField.setAttribute("id", "second")
      timeField.appendChild(secondField)
      timeField.style.fontSize = '25cqw'
    }
    const showDate = qsStrToBool(getParam('date'))
    if (showDate) {
      const dateField = document.getElementById("date")
      const textDateField = document.createElement("span")
      textDateField.setAttribute("id", "textDateField")
      const hiddenDateField = document.createElement("span")
      hiddenDateField.setAttribute("id", "hiddenDateField")
      dateField.appendChild(textDateField)
      dateField.appendChild(hiddenDateField)
    }

    const run = () => {
      const now = new Date()
      const hour = padZero(now.getHours())
      if (hourField.textContent !== hour) hourField.textContent = hour
      const minute = padZero(now.getMinutes())
      if (minuteField.textContent !== minute) minuteField.textContent = minute
      if (showSeconds) {
        const second = padZero(now.getSeconds())
        if (secondField.textContent !== second) secondField.textContent = second
      }
      if (showDate) {
        const year = now.getFullYear()
        const month = now.getMonth() // note - month is zero-indexed
        const date = padZero(now.getDate())
        const ymd = `${year}${month}${date}`
        if (hiddenDateField.textContent !== ymd) {
          hiddenDateField.textContent = ymd
          const weekday = now.getDay() // note - zeroindexed, so sunday is 0
          textDateField.textContent = `${days[weekday]} den ${date}. ${months[month]} ${year}`
        }
      }
    }
    let intervalTimer
    window.addEventListener('DOMContentLoaded', () => {
      intervalTimer = setInterval(run, 100)
    })
    window.addEventListener('beforeunload', () => {
      clearInterval(intervalTimer)
    })
  </script>
</body>

</html>